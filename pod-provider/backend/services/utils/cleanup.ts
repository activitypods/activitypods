import { arrayOf, getId } from '@semapps/ldp';
import { ServiceSchema } from 'moleculer';

/**
 * Service to clean up Pods data
 */
const CleanupSchema = {
  name: 'cleanup' as const,
  actions: {
    deleteUpdateActivities: {
      async handler(ctx) {
        const { username } = ctx.params;
        const accounts = await ctx.call('auth.account.find', { query: username === '*' ? undefined : { username } });

        for (const { username: dataset, webId } of accounts) {
          // @ts-expect-error TS(2339): Property 'dataset' does not exist on type '{}'.
          ctx.meta.dataset = dataset;
          // @ts-expect-error TS(2339): Property 'webId' does not exist on type '{}'.
          ctx.meta.webId = webId;

          this.logger.info(`Looking for Update activities generated by ${webId}...`);

          const container = await ctx.call('activitypub.activity.list', {
            filters: {
              a: 'https://www.w3.org/ns/activitystreams#Update'
            }
          });

          for (const updateActivity of arrayOf(container['ldp:contains'])) {
            this.logger.info(`Deleting Update activity ${getId(updateActivity)}...`);
            await ctx.call('activitypub.activity.delete', {
              resourceUri: getId(updateActivity)
            });
          }
        }
      }
    }
  }
} satisfies ServiceSchema;

export default CleanupSchema;

declare global {
  export namespace Moleculer {
    export interface AllServices {
      [CleanupSchema.name]: typeof CleanupSchema;
    }
  }
}
